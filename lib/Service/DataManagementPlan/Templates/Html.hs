module Service.DataManagementPlan.Templates.Html
  ( dmp2html
  ) where

import Control.Lens ((^.))
import Data.Maybe
import Data.Monoid
import qualified Data.UUID as U
import Text.Blaze.Html.Renderer.Pretty (renderHtml)
import Text.Blaze.Html5 ((!), stringValue)
import qualified Text.Blaze.Html5 as H
import qualified Text.Blaze.Html5.Attributes as A

import Api.Resource.FilledKnowledgeModel.FilledKnowledgeModelDTO
import Api.Resource.KnowledgeModel.KnowledgeModelDTO
import LensesConfig
import Model.KnowledgeModel.KnowledgeModel
import Service.DataManagementPlan.Templates.Css

dmp2html :: FilledKnowledgeModelDTO -> String
dmp2html = renderHtml . fkm2html

-- -----------------------------------------------------------------------------
textTitle = "DSW: Data Management Plan"

textFooter = "Data Managament Plan generated by Data Stewardship Wizard"

textDSW = "dsw.fairdata.solutions"

dswUrl = "https://dsw.fairdata.solutions"

textNotAnswered = "This question has not been answered yet!"

fkm2html :: FilledKnowledgeModelDTO -> H.Html
fkm2html km =
  H.docTypeHtml $ do
    H.head $ do
      H.title textTitle
      H.style . H.toHtml $ dmpCSS
    H.body $
      H.article ! A.class_ "dmp" $ do
        H.header $
          H.h1 $ do
            H.toHtml (textTitle <> " ")
            H.div ! A.class_ "km-name" ! A.id (stringValue . U.toString $ km ^. uuid) $ H.toHtml (km ^. name)
    -- Section per chapter
        mapM_ chapter2html (km ^. chapters)
        H.footer $ do
          H.toHtml (textFooter <> " ")
          H.span ! A.class_ "dsw-link" $ H.a ! A.href dswUrl ! A.target "_blank" $ H.toHtml textDSW

chapter2html :: FilledChapterDTO -> H.Html
chapter2html chapter =
  H.section ! A.class_ "chapter" ! A.id (stringValue . U.toString $ chapter ^. uuid) $ do
    H.h2 ! A.class_ "title" $ H.toHtml $ chapter ^. title
    H.p ! A.class_ "text" $ H.toHtml $ chapter ^. text
    mapM_ question2html (chapter ^. questions)

question2html :: FilledQuestionDTO -> H.Html
question2html question =
  H.div ! A.class_ "question" ! A.id (stringValue . U.toString $ question ^. uuid) $ do
    H.h3 ! A.class_ "title" $ H.toHtml $ question ^. title
    H.p ! A.class_ "text" $ H.toHtml $ question ^. text
    references2html $ question ^. references
    experts2html $ question ^. experts
    qanswer2html question

qanswer2html :: FilledQuestionDTO -> H.Html
qanswer2html question
  | notAnswered = notAnsweredHtml
  | otherwise =
    case question ^. qType of
      QuestionTypeOptions -> answerOption2html . fromJust $ optionAnswer
      QuestionTypeList -> answerItems2html . fromJust $ itemsAnswer
      _ -> answerSimple2html . fromJust $ simpleAnswer
  where
    notAnswered = isNothing optionAnswer && isNothing itemsAnswer && isNothing simpleAnswer
    optionAnswer = question ^. answerOption
    itemsAnswer = question ^. answerItems
    simpleAnswer = question ^. answerValue

notAnsweredHtml :: H.Html
notAnsweredHtml =
  H.div ! A.class_ "answer-block not-answered" $ do
    H.h4 . H.toHtml $ "Answer"
    H.p ! A.class_ "no-answer" $ H.toHtml textNotAnswered

answerSimple2html :: String -> H.Html
answerSimple2html answer =
  H.div ! A.class_ "answer-block answer-simple" $ do
    H.h4 . H.toHtml $ "Answer"
    H.p ! A.class_ "answer" $ H.toHtml answer

answerOption2html :: FilledAnswerDTO -> H.Html
answerOption2html answer =
  H.div ! A.class_ "answer-block answer-option" ! A.id (stringValue . U.toString $ answer ^. uuid) $ do
    H.h4 . H.toHtml $ "Answer"
    H.div ! A.class_ "answer label" $ H.toHtml $ answer ^. label
    case answer ^. advice of
      Just advice -> H.p ! A.class_ "advice" $ H.toHtml advice
      Nothing -> H.toHtml ""
    H.div ! A.class_ "followups" $ mapM_ question2html (answer ^. followUps)

answerItems2html :: [FilledAnswerItemDTO] -> H.Html
answerItems2html answerItems =
  H.div ! A.class_ "answer-block answer-items" $ do
    H.h4 . H.toHtml $ "Answers"
    mapM_ answerItem2html answerItems

answerItem2html :: FilledAnswerItemDTO -> H.Html
answerItem2html answerItem =
  H.div ! A.class_ "answer-block answer-item" $ do
    H.div ! A.class_ "answer item" $ do
      H.span ! A.class_ "title" $ H.toHtml $ answerItem ^. title
      H.span ! A.class_ "value" $ H.toHtml $ answerItem ^. value
    H.div ! A.class_ "followups" $ mapM_ question2html (answerItem ^. questions)

experts2html :: [ExpertDTO] -> H.Html
experts2html [] = H.toHtml ""
experts2html experts =
  H.div ! A.class_ "experts" $ do
    H.h4 . H.toHtml $ "Experts"
    H.ul ! A.class_ "experts-list" $ mapM_ expert2html experts
  where
    expert2html expert =
      H.li ! A.class_ "expert" ! A.id (stringValue . U.toString $ expert ^. uuid) $ do
        H.span ! A.class_ "name" $ H.toHtml $ expert ^. name
        H.toHtml " "
        H.span ! A.class_ "email" $ H.toHtml $ expert ^. email

references2html :: [ReferenceDTO] -> H.Html
references2html [] = H.toHtml ""
references2html references =
  H.div ! A.class_ "references" $ do
    H.h4 . H.toHtml $ "References"
    H.ul ! A.class_ "references-list" $ mapM_ reference2html references
  where
    reference2html reference =
      H.li ! A.class_ "reference reference-dmpbook" ! A.id (stringValue . U.toString $ reference ^. uuid) $
      H.span ! A.class_ "dmpbook-chapter" $ H.toHtml $ reference ^. chapter
