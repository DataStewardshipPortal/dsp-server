module Service.DataManagementPlan.Templates.Html
  ( dmp2html
  ) where

import Control.Lens ((^.))
import Data.List
import Data.Maybe
import Data.Text hiding (find)
import qualified Data.UUID as U
import Text.Blaze.Html.Renderer.Pretty (renderHtml)
import Text.Blaze.Html5 ((!), stringValue)
import qualified Text.Blaze.Html5 as H
import qualified Text.Blaze.Html5.Attributes as A

import Api.Resource.DataManagementPlan.DataManagementPlanDTO
import Api.Resource.FilledKnowledgeModel.FilledKnowledgeModelDTO
import Api.Resource.KnowledgeModel.KnowledgeModelDTO
import Api.Resource.Report.ReportDTO
import LensesConfig
import Model.DataManagementPlan.DataManagementPlanTemplateContext
import Model.KnowledgeModel.KnowledgeModel
import Service.DataManagementPlan.Templates.Css

dmp2html :: DataManagementPlanTemplateContext -> DataManagementPlanDTO -> String
dmp2html ctx = renderHtml . mkHtml ctx

textTitle = "DSW: Data Management Plan"

textFooter = "Data Managament Plan generated by Data Stewardship Wizard"

textNotAnswered = "This question has not been answered yet!"

textDSW :: DataManagementPlanTemplateContext -> Text
textDSW = snd . breakOnEnd "://" . _dataManagementPlanTemplateContextBaseURL

dswUrl :: DataManagementPlanTemplateContext -> Text
dswUrl = _dataManagementPlanTemplateContextBaseURL

bookrefUrl :: Text -> DataManagementPlanTemplateContext -> Text
bookrefUrl shortuid = replace ":shortuid" shortuid . _dataManagementPlanTemplateContextResourcePageURL

mkHtml :: DataManagementPlanTemplateContext -> DataManagementPlanDTO -> H.Html
mkHtml ctx dmp =
  H.docTypeHtml $ do
    H.head $ do
      H.title textTitle
      H.meta ! A.charset (H.stringValue "utf-8")
      H.style . H.toHtml $ dmpCSS
    H.body $ H.article ! A.class_ "dmp" $ do
      H.header $ H.h1 $ do
        H.toHtml (textTitle <> " ")
        H.div ! A.class_ "km-name" ! A.id (stringValue . U.toString $ km ^. uuid) $ H.toHtml (km ^. name)
      mapM_ (chapter2html ctx dmp) (km ^. chapters)
      H.footer $ do
        H.toHtml (textFooter <> " ")
        H.span ! A.class_ "dsw-link" $ H.a ! A.href (H.textValue . dswUrl $ ctx) ! A.target "_blank" $
          H.toHtml (textDSW ctx)
  where
    km = dmp ^. filledKnowledgeModel

chapter2html :: DataManagementPlanTemplateContext -> DataManagementPlanDTO -> FilledChapterDTO -> H.Html
chapter2html ctx dmp chapter =
  H.section ! A.class_ "chapter" ! A.id (stringValue . U.toString $ chapter ^. uuid) $ do
    H.h2 ! A.class_ "title" $ H.toHtml $ chapter ^. title
    H.p ! A.class_ "text" $ H.toHtml $ chapter ^. text
    chapterReport2html (dmp ^. metrics) . find (\cr -> (cr ^. chapterUuid) == (chapter ^. uuid)) $
      (dmp ^. report . chapterReports)
    mapM_ (question2html ctx dmp) (chapter ^. questions)

chapterReport2html :: [MetricDTO] -> Maybe ChapterReportDTO -> H.Html
chapterReport2html metrics Nothing = H.toHtml ""
chapterReport2html metrics (Just report) =
  H.section ! A.class_ "report" $ do
    H.h3 ! A.class_ "title" $ H.toHtml "Report"
    H.h4 $ H.toHtml "Indications"
    H.div ! A.class_ "indications" $ mapM_ indication2html (report ^. indications)
    H.h4 $ H.toHtml "Metrics"
    H.div ! A.class_ "metrics" $ H.table $ do
      H.thead $ H.tr $ do
        H.th $ H.toHtml "Metric"
        H.th $ H.toHtml "Score"
      H.tbody $ mapM_ (uncurry metricSummary2htmlTr) pairedMetricSummaries
  where
    pairedMetricSummaries = mapMaybe mkMetricPair (_chapterReportDTOMetrics report)
    mkMetricPair :: MetricSummaryDTO -> Maybe (MetricDTO, MetricSummaryDTO)
    mkMetricPair summary =
      case find (\m -> (m ^. uuid) == (summary ^. metricUuid)) metrics of
        Just metric -> Just (metric, summary)
        _ -> Nothing

indication2html :: IndicationDTO -> H.Html
indication2html (AnsweredIndicationDTO' indication) =
  H.table $ H.tbody $ do
    H.tr $ do
      H.th $ H.toHtml "Answered"
      H.td $ H.toHtml $ indication ^. answeredQuestions
    H.tr $ do
      H.th $ H.toHtml "Unanswered"
      H.td $ H.toHtml $ indication ^. unansweredQuestions

metricSummary2htmlTr :: MetricDTO -> MetricSummaryDTO -> H.Html
metricSummary2htmlTr metric summary =
  H.tr $ do
    H.td $ H.toHtml $ metric ^. title
    H.td $ H.toHtml $ summary ^. measure

question2html :: DataManagementPlanTemplateContext -> DataManagementPlanDTO -> FilledQuestionDTO -> H.Html
question2html ctx dmp question =
  H.div ! A.class_ (stringValue classes) ! A.id (stringValue . U.toString $ question ^. uuid) $ do
    H.h3 ! A.class_ "title" $ H.toHtml $ question ^. title
    H.p ! A.class_ "text" $ H.toHtml $ fromMaybe "" (question ^. text)
    references2html ctx $ question ^. references
    experts2html ctx $ question ^. experts
    qanswer2html ctx dmp question
  where
    classes = "question" ++ requiredClass ++ phaseClass
    requiredClass =
      if isRequired
        then " required"
        else " optional"
    phaseClass =
      case (question ^. requiredLevel) of
        Nothing -> " phase-none"
        (Just rlevel) -> " phase-" ++ show rlevel
    isRequired =
      case (question ^. requiredLevel) of
        (Just rlevel) -> rlevel <= (dmp ^. level)
        _ -> False

qanswer2html :: DataManagementPlanTemplateContext -> DataManagementPlanDTO -> FilledQuestionDTO -> H.Html
qanswer2html ctx dmp question
  | notAnswered = notAnsweredHtml
  | otherwise =
    fromMaybe (H.toHtml "") $
    case question ^. qType of
      QuestionTypeOptions -> answerOption2html ctx dmp <$> optionAnswer
      QuestionTypeList -> answerItems2html ctx dmp <$> itemsAnswer
      _ -> answerSimple2html <$> simpleAnswer
  where
    notAnswered = isNothing optionAnswer && isNothing itemsAnswer && isNothing simpleAnswer
    optionAnswer = question ^. answerOption
    itemsAnswer = question ^. answerItems
    simpleAnswer = question ^. answerValue

notAnsweredHtml :: H.Html
notAnsweredHtml =
  H.div ! A.class_ "answer-block not-answered" $ do
    H.h4 . H.toHtml $ "Answer"
    H.p ! A.class_ "no-answer" $ H.toHtml textNotAnswered

answerSimple2html :: String -> H.Html
answerSimple2html answer =
  H.div ! A.class_ "answer-block answer-simple" $ do
    H.h4 . H.toHtml $ "Answer"
    H.p ! A.class_ "answer" $ H.toHtml answer

answerOption2html :: DataManagementPlanTemplateContext -> DataManagementPlanDTO -> FilledAnswerDTO -> H.Html
answerOption2html ctx dmp answer =
  H.div ! A.class_ "answer-block answer-option" ! A.id (stringValue . U.toString $ answer ^. uuid) $ do
    H.h4 . H.toHtml $ "Answer"
    H.div ! A.class_ "answer label" $ H.toHtml $ answer ^. label
    case answer ^. advice of
      Just advice -> H.p ! A.class_ "advice" $ H.toHtml advice
      Nothing -> H.toHtml ""
    H.div ! A.class_ "followups" $ mapM_ (question2html ctx dmp) (answer ^. followUps)

answerItems2html :: DataManagementPlanTemplateContext -> DataManagementPlanDTO -> [FilledAnswerItemDTO] -> H.Html
answerItems2html ctx dmp answerItems =
  H.div ! A.class_ "answer-block answer-items" $ do
    H.h4 . H.toHtml $ "Answers"
    mapM_ (answerItem2html ctx dmp) answerItems

answerItem2html :: DataManagementPlanTemplateContext -> DataManagementPlanDTO -> FilledAnswerItemDTO -> H.Html
answerItem2html ctx dmp answerItem =
  H.div ! A.class_ "answer-block answer-item" $ do
    H.div ! A.class_ "answer item" $ do
      H.span ! A.class_ "title" $ H.toHtml $ answerItem ^. title
      H.span ! A.class_ "value" $ H.toHtml $ fromMaybe "" (answerItem ^. value)
    H.div ! A.class_ "followups" $ mapM_ (question2html ctx dmp) (answerItem ^. questions)

experts2html :: DataManagementPlanTemplateContext -> [ExpertDTO] -> H.Html
experts2html _ [] = H.toHtml ""
experts2html _ experts =
  H.div ! A.class_ "experts" $ do
    H.h4 . H.toHtml $ "Experts"
    H.ul ! A.class_ "experts-list" $ mapM_ expert2html experts
  where
    expert2html expert =
      H.li ! A.class_ "expert" ! A.id (stringValue . U.toString $ expert ^. uuid) $ do
        H.span ! A.class_ "name" $ H.toHtml $ expert ^. name
        H.toHtml " "
        H.span ! A.class_ "email" $ H.toHtml $ expert ^. email

references2html :: DataManagementPlanTemplateContext -> [ReferenceDTO] -> H.Html
references2html _ [] = H.toHtml ""
references2html ctx references =
  H.div ! A.class_ "references" $ do
    H.h4 . H.toHtml $ "References"
    H.ul ! A.class_ "references-list" $ mapM_ reference2html references
  where
    reference2html (ResourcePageReferenceDTO' reference) =
      H.li ! A.class_ "reference reference-resourcepage" ! A.id (stringValue . U.toString $ reference ^. uuid) $ H.a !
      A.class_ "resourcepage-link" !
      A.href (H.textValue $ bookrefUrl shortuid ctx) !
      A.target "_blank" $
      H.toHtml shortuid
      where
        shortuid = pack (reference ^. shortUuid)
    reference2html (URLReferenceDTO' reference) =
      H.li ! A.class_ "reference reference-url" ! A.id (stringValue . U.toString $ reference ^. uuid) $ H.a !
      A.class_ "url-link" !
      A.href (stringValue $ reference ^. url) !
      A.target "_blank" $
      H.toHtml $
      reference ^.
      label
    reference2html (CrossReferenceDTO' reference) =
      H.li ! A.class_ "reference reference-xref" ! A.id (stringValue . U.toString $ reference ^. uuid) $ H.span !
      A.class_ "xref-uuid" $
      H.toHtml $
      U.toString $
      reference ^.
      targetUuid
